import{fZ as a,A as e,f_ as t,f$ as s,a2 as l,F as o,bg as r,w as i,S as n,b4 as p,g as S,u,aU as d,bF as c}from"./detailed_results-bc3a1d81.chunk.js";import{y as f,m,b as h,r as w,H as I,M as g,g as P,J as b,A as v,h as y,t as H,T as M,ao as N,n as k,I as C}from"./preset_utils-40b1d43e.chunk.js";import{P as B,D as F,a as R,S as T,b as A,c as D,d as U,e as x,O as j,E,R as O,f as _,g as V,h as W,i as G,j as J,k as Z}from"./presets-1fef774e.chunk.js";const $=f({fieldName:"armor",values:[{value:a.NoArmor,tooltip:"No Inner Fire"},{actionId:e.fromSpellId(48168),value:a.InnerFire}]}),q=m({fieldName:"useMindBlast",id:e.fromSpellId(48127)}),z=m({fieldName:"useShadowWordDeath",id:e.fromSpellId(48158)}),K=m({fieldName:"useShadowfiend",id:e.fromSpellId(34433)}),L={inputs:[h({fieldName:"rotationType",label:"Rotation Type",labelTooltip:"Choose how to clip your mindflay. Basic will never clip. Clipping will clip for other spells and use a 2xMF2 when there is time for 4 ticks. Ideal will evaluate the DPS gain of every action to determine MF actions.",values:[{name:"Ideal",value:t.Ideal},{name:"AoE",value:t.AoE}]}),h({fieldName:"precastType",label:"PreCast Spell",labelTooltip:"Choose which spell you want to Precast",values:[{name:"None",value:s.Nothing},{name:"Vampiric Touch",value:s.PrecastVt},{name:"Mind Blast",value:s.PrecastMb}]})]},Q=w(n.SpecShadowPriest,{cssClass:"shadow-priest-sim-ui",cssScheme:"priest",knownIssues:[],epStats:[l.StatIntellect,l.StatSpirit,l.StatSpellPower,l.StatSpellHit,l.StatSpellCrit,l.StatSpellHaste,l.StatMP5],epReferenceStat:l.StatSpellPower,displayStats:[l.StatHealth,l.StatMana,l.StatStamina,l.StatIntellect,l.StatSpirit,l.StatSpellPower,l.StatSpellHit,l.StatSpellCrit,l.StatSpellHaste,l.StatMP5],modifyDisplayStats:a=>{let e=new o;return e=e.addStat(l.StatSpellHit,1*a.getTalents().shadowFocus*r),{talents:e}},defaults:{gear:B.gear,epWeights:o.fromMap({[l.StatIntellect]:.11,[l.StatSpirit]:.47,[l.StatSpellPower]:1,[l.StatSpellHit]:.87,[l.StatSpellCrit]:.74,[l.StatSpellHaste]:1.65,[l.StatMP5]:0}),consumes:F,rotation:R,talents:T.data,specOptions:A,raidBuffs:D,partyBuffs:i.create({}),individualBuffs:U,debuffs:x,other:j},playerIconInputs:[$],rotationIconInputs:[q,z,K],rotationInputs:L,includeBuffDebuffInputs:[I,g,P,b,v,y,H],excludeBuffDebuffInputs:[],otherInputs:{inputs:[M,N,k]},encounterPicker:{showExecuteProportion:!1},presets:{talents:[T,E],rotations:[O,_,V],gear:[W,G,J,Z,B]},autoRotation:a=>{const e=a.sim.encounter.targets.length;return e>4?V.rotation.rotation:e>1?_.rotation.rotation:O.rotation.rotation},raidSimPresets:[{spec:n.SpecShadowPriest,tooltip:p[n.SpecShadowPriest],defaultName:"Shadow",iconUrl:S(u.ClassPriest,2),talents:T.data,specOptions:A,consumes:F,defaultFactionRaces:{[d.Unknown]:c.RaceUnknown,[d.Alliance]:c.RaceDwarf,[d.Horde]:c.RaceUndead},defaultGear:{[d.Unknown]:{},[d.Alliance]:{1:G.gear,2:J.gear,3:Z.gear,4:B.gear},[d.Horde]:{1:G.gear,2:J.gear,3:Z.gear,4:B.gear}}}]});class X extends C{constructor(a,e){super(a,e,Q)}}export{X as S};
//# sourceMappingURL=sim-5e0d2dfd.chunk.js.map
